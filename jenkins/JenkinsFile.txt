pipeline {
    agent {
		docker {
			image 'python:3.10.4'
		}
	}

	triggers {
        githubPush()
    }
	options {
	buildDiscarder(
        logRotator(
            // number of build logs to keep
            numToKeepStr:'1',
            // history to keep in days
            daysToKeepStr: '15',
            // artifacts are kept for days
            artifactDaysToKeepStr: '0',
            // number of builds have their artifacts kept
            artifactNumToKeepStr: '0'
        )
   	 )
    }
    stages {

		stage('Fetch') {
			steps {
				checkout scm
			}
		}
        stage('Build') {
            steps {
				withEnv(["HOME=${env.WORKSPACE}"]) {
					dir("jenkins") {
						sh 'python -m pip install --upgrade pip --user'
						sh 'python -m pip install -r requirements.txt'
					}
					dir("NextDoor")
					{
						sh 'python manage.py makemigrations'
						sh 'python manage.py migrate'	
						}
				}
            }
        }
		stage('Unit & Integration Tests [Metric 1]') {
            steps {
					withEnv(["HOME=${env.WORKSPACE}"]) {
					dir("NextDoor"){
						sh "python -m coverage run manage.py test --keepdb"
						sh "python -m coverage report"
						}
					}
				}
			}
			stage('Pylint - Code Analysis [Metric 2]') {
                steps {
					withEnv(["HOME=${env.WORKSPACE}"]) {
					dir("NextDoor"){
						sh 'python -m pylint NextDoor Account Home --exit-zero'
						}
					}
				}
			}
			stage('Deploy to Heroku'){
                steps {
                sh '''
                    curl https://cli-assets.heroku.com/install.sh | sh;
                    heroku container:login
                    heroku container:push web --app testing-deployment
                    heroku container:release web --app testing-deployment
                    '''
                }
			}
 }


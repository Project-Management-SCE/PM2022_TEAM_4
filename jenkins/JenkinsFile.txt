pipeline {
    agent {
		docker {
			image 'python:3.10.4'
			args '-u root'
		}
	}

	triggers {
        githubPush()
    }
	options {
        buildDiscarder(
            logRotator(
                // number of build logs to keep
                numToKeepStr:'1',
                // history to keep in days
                daysToKeepStr: '15',
                // artifacts are kept for days
                artifactDaysToKeepStr: '0',
                // number of builds have their artifacts kept
                artifactNumToKeepStr: '0'
            )
         )
    }
    stages {
		stage('Fetch') {
			steps {
				checkout scm
			}
		}
        stage('Build') {
            steps {
				withEnv(["HOME=${env.WORKSPACE}"]) {
					dir("jenkins") {
						sh 'python -m pip install --upgrade pip --user'
						sh 'python -m pip install -r requirements.txt'
					}
					dir("NextDoor"){
						sh 'python manage.py makemigrations'
						sh 'python manage.py migrate'	
					}
				}
            }
        }
		stage('Unit & Integration Tests [Metric 1]') {
            steps {
				withEnv(["HOME=${env.WORKSPACE}"]) {
					dir("NextDoor"){
						sh "python -m coverage run manage.py test --keepdb"
						sh "python -m coverage report"
					}
				}
			}
		}
		stage('Pylint - Code Analysis [Metric 2]') {
            steps {
				withEnv(["HOME=${env.WORKSPACE}"]) {
			   		dir("NextDoor"){
			    		sh 'python -m pylint NextDoor Account Home --exit-zero'
				   	}
				}
			}
		}
		stage('Build Docker Image'){
            steps{
                dir("OAuth2.0"){
                    echo "Building Docker Image"
                    bat 'docker build -t oauth2 -f Dockerfile --no-cache .'
                }
            }
        }
        stage('Tag Docker Image'){
            steps{
                echo "Tagging Docker Image"
                bat "docker tag oauth2 registry.heroku.com/onlinecourseportal/web:${env.BUILD_NUMBER}"
            }
        }
        stage('Docker Login'){
            steps{
                withCredentials([usernamePassword(credentialsId:'Heroku',usernameVariable:'shlomsh7@ac.sce.ac.il',passwordVariable:'Team4Nextdoor@')]){
                    echo "Docker Logging In"
                    bat "docker login registry.heroku.com -u ${env.USR} -p ${env.PWD}"
                }
            }
        }
        stage ('Push Docker Image'){
            steps{
                echo "Pushing Docker Image"
                bat "docker push registry.heroku.com/onlinecourseportal/web:${env.BUILD_NUMBER}"
            }
        }
        stage ('Deploy Docker Image'){
            steps{
                withEnv(['HEROKU=C:\\Progra~1\\heroku\\bin']){
                    withCredentials([usernamePassword(credentialsId:'Heroku',usernameVariable:'shlomsh7@ac.sce.ac.il',passwordVariable:'Team4Nextdoor@')]){
                        echo "Docker Logging In"
                        bat "docker login registry.heroku.com -u ${env.USR} -p ${env.PWD}"
                    }
                    echo "Deploying Docker Image"
                    bat "$HEROKU\\heroku container:release web --app=onlinecourseportal"
                }
            }
        }
    }
    post {
        success {
            echo "BUILD SUCCESS"
        }
    }
}


